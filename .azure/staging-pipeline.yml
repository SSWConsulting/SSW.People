# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pr:
  branches:
    include:
    - main
    exclude:
    - release/*

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm

stages:
- stage: build
  displayName: build
  pool:
    name: On-Premise # Runs on OnPrem Windows (for now)
    demands:
    - Agent.Name -equals $(buildAgentName)
    # vmImage: 'ubuntu-latest' # Runs on Hosted Ubuntu VM

  jobs:
  - job: Build
    steps:
    - checkout: self
      clean: true
      fetchDepth: 1

    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      displayName: 'Replace tokens in env'
      inputs:
        targetFiles: .env.template
        escapeType: none
        tokenPrefix: '#{'
        tokenSuffix: '}'
        actionOnMissing: fail

    - powershell: |
        mv .env.template .env.production
        cat .env.production
      displayName: 'Rename env file'

    # - task: Cache@2
    #   inputs:
    #     key: 'npm | "$(Agent.OS)" | package.json'
    #     restoreKeys: |
    #        npm | "$(Agent.OS)"
    #        npm
    #     path: $(npm_config_cache)
    #   displayName: Cache npm

    - task: UseNode@1
      inputs:
        version: '13.7.x'

    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: custom
        verbose: false
        customCommand: ci --prefer-offline --no-audit

    - task: Npm@1
      displayName: 'npm lint'
      inputs:
        command: custom
        verbose: false
        customCommand: run-script lint

    - task: Npm@1
      displayName: 'npm build'
      inputs:
        command: custom
        verbose: false
        customCommand: run-script build

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'public'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/public.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      #condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),eq(variables['Build.SourceBranch'], 'refs/heads/release')))
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)

    - task: DeleteFiles@1
      displayName: 'remove previous employees'
      inputs:
        Contents: 'public/previous-employees'
        
- stage: test
  dependsOn: build
  displayName: Tests - CodeAuditor
  pool:
    name: On-Premise # Runs on OnPrem Windows (for now)
    demands:
    - Agent.Name -equals $(buildAgentName)
    # vmImage: 'ubuntu-latest' # Runs on Hosted Ubuntu VM
    steps:
    - template: templates/test.yml

- stage: deploy
  dependsOn: build
  displayName: Deploy to IIS
  #condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),eq(variables['Build.SourceBranch'], 'refs/heads/release')))
  jobs:
  - deployment: DeploytoIIS
    environment:
      name: Staging2
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/deploy.yml